//FIRST lINE OF CODE IN JS
document.write("Hello World");
document.write("1000");

// Adding HTML tags in JS
document.write("</br></br>");
document.write("100 </br>");

document.write(
  "<p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Odio tempora id nemo optio eligendi voluptas.</p>"
);

//js variables: =>
//let,var and const

//VAR
// Can be redeclared - No ERROR on console
// Can be used before Declaration -- Undefined on console
// Global scope
var x = "Hellow World";
document.write(x);

//Its must either to use single quote or double quote but no the mix of both in case of string
x = "Wow!";
document.write(x, "</br>");

var first, second;
first = 100;
document.write(first);

//let
//Can not be redeclared
//can not be used before Declaration
//block level scope
let name = "Kiran";
// let name ="Atul"; -- Error on sonsole
name = "Atul"; // CAN be Modified the value

//const
//can not be modified
// can not be redeclared
const con = 100;
// con = 200; // Error on console

/*===============DATA TYPES============== */

//Primitive: String Number Boolean
//Non Primitve : Array,object,null, undefined

var st = "Kiran"; //String
st = 125; //Number
st = "125"; // String
st = true; // boolean

document.write("</br>", typeof st, "</br>");
st = "Welcome";
document.write(typeof ("</br>", st));
document.write("</br>", st);

var array = ["A", "123", 0.98];
document.write(array, "  ", typeof array); //A,123,0.98 Object

document.write(" ", typeof null); //null

document.write(" ", typeof undefined); //undefined

document.write(X);
var X = 100;

console.log(X);
console.log(typeof X); //number

/*=============== Arithmetic Operator ============== */
var a, b, c;
(a = 10), (b = 10);
c = a + b;
console.log();
console.log(c, typeof c); //20 number
console.log(c - a, typeof c); //10 number
console.log(c / a, typeof c / a); //2 number
console.log(c % a, typeof c); //0 number
console.log(c * a, typeof c); //200 number
console.log(3 ** 2); //9
//  console.log(3++)//ERROR
console.log(a++); //10
console.log(++a); //12

/*=============== Assignment Operators ============== */
console.log(a == b); //false
console.log((a = c), a); //20 20
console.log((a += c)); //40
console.log(a); //40
// console.log(2**=100);//ERROR
var d = 1;
console.log((d **= 100)); //1
d = 2;
console.log((d **= 100)); //1.2676506002282294e+30

/*=============== Console ============== */
console.time();

console.log("Looged on the console");

console.error("This is an Error generated by programmer with the console");

console.warn("this is an warning created by the user with the console");
console.warn(
  "this is an warning created by the user with the console",
  typeof null,
  10 + 100,
  array[("A", "B")]
); // Whats diss...?

console.log([1, 2, 3, 4, 5]);

console.table([1, 2, 3, 4, 5]);

console.timeEnd();

console.clear();

//DOM on console

document.getElementById("header");

document.getElementById("header").innerHTML;

document.getElementById("header").innerText;
/*
"Title
WorkForce" 
*/
/*===============Comparision operators ============== */

// === vs == in first the data type must be same to get the true result and in second only value is checked irrespective of the data type

var x = 10;
var y = "10";
// let x = "10"; // Erro as x already defined
let p = 10;
let q = "10";

console.log(x == p); //true
console.log(x == y); //true
console.log(p == y); //true

console.log(x === p); //true
console.log(x === y); //false
console.log(p === y); //false

console.log(null === null); //true
console.log(undefined === undefined); //true
console.log(undefined === null); //false

/*=============== IF else in JS ============== */

if (x === y) {
  //false condition
  console.log("Style changed");
} else {
  console.log("No Style changed");
}

var age = 23;
if ((age <= 18) & (age >= 14)) {
  console.log("You are a student!");
} else if (age > 18) {
  console.log("You are a senior student!");
} else {
  console.log("Tum abhi bachhe ho!");
}
// You are a senior student!

age = 18;
if ((age <= 18) & (age >= 14)) {
  console.log("You are a student!");
} else if (age >= 18) {
  // even age is 18 and two consitions are satisfiying then also only first condition will get execute
  console.log("You are a senior student!");
} else {
  console.log("Tum abhi bachhe ho!");
}

if (!(8 > 9)) {
  console.log("true condition!");
}

// ------------------------------

// DOM Manipulation with if else
var uname = "Kiran";
if (uname == "Kiran") {
  document.getElementById("header").innerHTML = "Welcome back Mr." + uname;
}

/*============= Switch Case ====================*/

// age validation with switch case

var age = 25;

var key;

switch (key) {
  case "kiran":
    document.getElementById("header").innerHTML =
      "Mr. " + uname + "is not eligible for this event";
    break;
  case 20:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + " is eligible for this event";
    break;
  case null:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + " is eligible for this event";
    break;
  case undefined:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + " is eligible for this event";
    break;
  case Object:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + " is eligible for this event";
    break;
  default:
    break;
}

switch (true) {
  case age <= 18:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + "is not eligible for this event";
    break;
  case age <= 25:
    document.getElementById("header").innerHTML =
      "Mr. " + uname + " is eligible for this event";
  default:
    break;
}
/*---------------- Alerts in JS ----------------------*/

var a = 100;
var b = 25;

if (a > b) {
  // alert("the greater value is of a and its " + a);
  // alert(a+b);
  // alert("the value of b is " + b);
}

/*---------------------- CONFIRM BOX IN JS ------------*/

// CONFIRM() ask for two values OK(true) and Cancel(false) and we can store these values in the variables

// let res = confirm("How was  your experience?");
// alert(res)
var res;
if (res) {
  alert("We glad you liked it!");
} else {
  // alert("Thanks for your feedback!");
}

/*--------------- PROMPT BOX ------------------------*/

// with this we can take any value from user and use it in our program

// var res = prompt("Rate us out of 5");
document.write("</br> </br> </br>", res);

/*====================== JS FUNCTIONS ==================*/

// FUNCTION Defined
function hello() {
  document.write("</br>");
  document.write("Hey! its my FIRST function is JS");
}
hello();
hello();
hello();
hello();

// paramterised function

function demo(a, b) {
  if (typeof a == "number" && typeof b == "number") {
    alert("Both are the numbers");
  } else if (typeof a === "number" && typeof b !== "number") {
    alert("Only a is the numbers");
  } else if (typeof a !== "number" && typeof b == "number") {
    alert("Only b is the numbers");
  } else alert("Neither are the numbers");
}

// demo();
// demo(12,13);

//NOTE : There is no issue even if we pass more or less arguments than defined in the function, If given less arguments then parameter who didnt got any value will be "undefined"

// ==================== Arrays in JS ==============

// INDEXED COLLECTION OF Various elementswith the different datatypes

var array = [1, 2, 3, 4, 5];
// alert(array)

array = ["Kiran", "Rahul", "Pankaj"];
// alert(array)

array = [10, 20, 90.45, "Kiran", null, undefined, Object, true];
// alert(array)

// alert(array[1])

// alert(array[10]) // undefined

for (var a = 0; a < array.length; a++) {
  // alert(array[a]);
}

/*
array = [1,2,3,4,5];
var sum = 0
document.write("<ul>")
for(var b =0; b< array.length;b++ ){
        document.write("<li>"+ array[b] + "</li>")
        sum += array[b];
}
document.write("</ul>")
document.write("Sum of array elements is "+ sum)
*/
/*
var ary = new Array(); // growable size
alert(ary.length);
for(var g =0; g<4;g++){
    ary[g] = prompt("Enter the value..");
}
alert(ary.length);

document.write("<ul>")
for(var b =0; b<=ary.length;b++ ){
        document.write("<li>"+ ary[b] + "</li>")
}
document.write("</ul>")
*/

// =================
/*

var ary2 = new Array(3); // size is 3

ary2[0]= 10;
ary2[2]= 40;
ary2[3]= 30;
ary2[1]= 20; // even thought size is 3, still we are able to add more in it
ary2[4]= 50;// .. this one too!

document.write("<ul>")
for(var b =0; b<=ary2.length;b++ ){
        document.write("<li>"+ ary2[b] + "</li>")
}
document.write("</ul>")

*/

// ======================== Multidimentional Arryas ============

var a = [
  ["Harry", 18, "Male", "B.com"],
  ["Kiran", 16, "Male", "B.com"],
  ["Rahul", 19, "Male", "B.com"],
  ["Suresh", 17, "Male", "B.com"],
];
console.log(a);
console.log(a[2]);
console.log(a[2][3]);

for (b = 0; b < a.length; b++) {
  console.log(a[b]);
}

document.write("</br> </br> </br>");

for (b = 0; b < a.length; b++) {
  document.write(a[b] + "</br>");
}

/*
Harry,18,Male,B.com
Kiran,16,Male,B.com
Rahul,19,Male,B.com
Suresh,17,Male,B.com
*/

//comma is also removed with the below interations

document.write("</br> </br> </br>");

for (b = 0; b < a.length; b++) {
  for (c = 0; c < a[b].length; c++) {
    document.write(a[b][c] + " => ");
  }
  document.write("</br>");
}
/*
Harry => 18 => Male => B.com =>
Kiran => 16 => Male => B.com =>
Rahul => 19 => Male => B.com =>
Suresh => 17 => Male => B.com =>
*/

//multi dimetnional array in  the table

document.write("</br> </br> </br>");

document.write("<table border='1px'>");
for (b = 0; b < a.length; b++) {
  document.write("<tr>");
  for (c = 0; c < a[b].length; c++) {
    document.write("<td>" + a[b][c] + "</td>");
  }
  document.write("</tr>");
}
document.write("</table>");

document.write("</br> </br> </br>");

// deleting an element from an array

// delete array[index] -- this will delete and that index will become undefined

delete a[1][0];

document.write("<table border='1px'>");
for (b = 0; b < a.length; b++) {
  document.write("<tr>");
  for (c = 0; c < a[b].length; c++) {
    document.write("<td>" + a[b][c] + "</td>");
  }
  document.write("</tr>");
}
document.write("</table>");

document.write("</br> </br> </br>");
/*

Harry	18	Male	B.com
undefined	16	Male	B.com
Rahul	19	Male	B.com
Suresh	17	Male	B.com
*/

// ============= Arrays Methods ==============

/*
sort()
reverse()
*/

var a = new Array();
a = [1, 2, 3, 47, 5, 4, 6, 7];

a.sort();
document.write(a); // 1,2,3,4,47,5,6,7
document.write("</br>");

a.reverse();
document.write(a); // 7,6,5,47,4,3,2,1
document.write("</br>");

// pop() - will remove and return the last element from an array

document.write(a.pop()); // 1
document.write("</br>");

document.write(a); // 7,6,5,47,4,3,2
document.write("</br>");

//push() - will add new element to the last in the array
// add elemetn 10 in the last and return the new size of the array

document.write(a.push(10)); // 8
document.write("</br>");

document.write(a); // 7,6,5,47,4,3,2,10
document.write("</br>");

// --------------

document.write(a.push(2, 100)); // 10
document.write("</br>");

document.write(a); // 7,6,5,47,4,3,2,10,2,100
document.write("</br>");

//---------------

document.write(a.push(null)); // 11
document.write("</br>");

//NOTE the ',' after 100 i.e. the last element
document.write(a); // 7,6,5,47,4,3,2,10,2,100,
document.write("</br>");

// ---------------

document.write(a.push(200)); //12
document.write("</br>");

document.write(a); // 7,6,5,47,4,3,2,10,2,100,,200
document.write("</br>");

// ==================
// Shift() -- opposide of pop() -- remove elements from starting index
// Unshift() -- opposide of push() -- adds element in the starting index

document.write(a.shift()); //7
document.write("</br>");

document.write(a); //6,5,47,4,3,2,10,2,100,,200
document.write("</br>");

//
document.write(a.unshift("500,300")); //7
document.write("</br>");

document.write(a); //500,300,6,5,47,4,3,2,10,2,100,,200
document.write("</br>");

// ================
// concat() --used to merge two different arrays
// join()

var a = ["Sanjay", "Kiran", "Rahul"];
var b = ["Pankaj", "Rajat"];

var c = a.concat(b);
document.write(c); // Sanjay,Kiran,Rahul,Pankaj,Rajat

var c = b.concat(a);
document.write(c); //Pankaj,Rajat,Sanjay,Kiran,Rahul
document.write("</br>");

//join() -- result of thi method will convert and array into the string

var d = a.join(" ");
document.write(d, typeof d); // Sanjay Kiran Rahul string
document.write("</br>");

d = a.join(" $ ");
document.write(d, " ", typeof d); // Sanjay $ Kiran $ Rahul string
document.write("</br>");

d = a.join("</br>");
document.write(d, typeof d);
/*
Sanjay
Kiran
Rahul
string
*/
document.write("</br>");

// =====================
// slice(start_index,end_index) - used to slice an part of array from one array to form new array
// start_index - inclusive
// end_index - exclusive

// splice(3 arguments)

document.write(a + "</br>");
var e = a.concat("Ramesh", "Tanishque", "Tadibul");
document.write(e + "</br>"); // Sanjay,Kiran,Rahul,Ramesh,Tanishque,Tadibul

var f = e.slice(3, 5);
document.write(f, "  ", typeof f); // Ramesh,Tanishque object

f = e.slice(3, 8);
document.write(f, "  ", typeof f, f.length); // Ramesh,Tanishque,Tadibul object 3

f = e.slice(-3, -1);
document.write(f, "  ", typeof f, f.length); //Ramesh,Tanishque object 2

f = e.slice(-1, -3);
document.write(f, "  ", typeof f, f.length); //object 0

//splice(start_index, how_many_delete_from start index,new_value,new value)// we can add as many values as we want

document.write(e + "</br>"); // Sanjay,Kiran,Rahul,Ramesh,Tanishque,Tadibul

e.splice(3, 0, "Reshma", "Anisha");
document.write(e, "  ", typeof f); //Sanjay,Kiran,Rahul,Reshma,Anisha,Ramesh,Tanishque,Tadibul object

e.splice(3, 3, "Rohini");
document.write(e, "  ", typeof f); //Sanjay,Kiran,Rahul,Rohini,Tanishque,Tadibul object

// ========================= isArray(variable_name)

// return true if var is array and false if its not!

var a = "Kiran";
console.log(Array.isArray(a)); // false

console.log(Array.isArray(e)); // true

// ===================== indexOf() & lastIndexOf

var a = [1, 2, 3, 4, 2, 6];

// a.indexOf("search_value",start_index);
// defauylt start_index is 0

console.log(a.indexOf(1)); //0

console.log(a.indexOf(1, 2)); // -1

console.log(a.indexOf(2)); // 1

// a.lastIndexOf(seachrValue,startIndexOfSearch)

console.log(a.lastIndexOf(2)); // 4

// ==================== includes()

// returns either true or false
// data in " " [a.includes("Kiran")]is case sensitive in case of strings

console.log(a);
/*
(6) [1, 2, 3, 4, 2, 6]
0: 1
1: 2
2: 3
3: 4
4: 2
5: 6
length: 6
[[Prototype]]: Array(0)
*/

//iterating thru an array in JS
a.forEach(function (value) {
  console.log(value);
});
/*
1
2
3
4
2
6
*/

console.log(a.includes(3)); // true

console.log(a.includes(10)); // false

//=========================== some(funcName) and evey(funcName)
// both return boolean true or false
//some(function_Name) -- RETURNS TRUE EVEN IF ANY ONE VALUES MATCHED THE CONDITION
//every(functionName) --  Returns tru only when if found all the values matching the condition in the function

var ages = [10, 20, 30, 25, 22, 16];
var b = ages.some(checkKid);

console.log(b); // true

function checkKid(age) {
  return age <= 18;
}

/*function checkKid(age){
  return age <= 30; 
}
Note : duplicate function can be defined but the lastest defined function will get executed 
*/

b = ages.some(ChottaKid);

console.log(b); // false

function ChottaKid() {
  var age;
  return age <= 5;
}
//============ array.every(functionName)

b = ages.every(checkKid);
console.log(b); // false

// =========== find() and findIndex()

// find(functionName) -- returns the first element from an array based on the funcion passed in the argument
// findIndex(functionName) -- retturn the index of the element with the find()

var ages = [40, 50, 60, 35, 43, 23, 45];

var res = ages.find(checkKid);

function checkKid(age) {
  return age <= 18;
}

console.log(res); //undefined

function checkKidNew(age) {
  return age <= 50;
}

var res = ages.find(checkKidNew);

console.log(res); // 40

//after sorting
ages.sort(); // [23,40,43 .....60]

var res = ages.find(checkKidNew);

console.log(res); // 23

// ============ filter(functionName)
// filter creates the new array based on some condition

ages = [30, 40, 35, 33, 32, 28, 50, 60];

var b = ages.filter(findAdutls);
console.log(b, typeof b); //
/*
(3) [40, 50, 60]   'object'
0: 40
1: 50
2: 60
length: 3
[[Prototype]]: Array(0)'
*/

function findAdutls(age) {
  return age >= 40;
}

// ============== tString()
// converts an array into the string and we wont be able to apply any method of array on string

var arrayy = ["Kiran", "Yadav", "Kalamboli", 903487845, "painter"];

arrayy.toString();

console.log(arrayy.toString(), typeof arrayy.toString()); // Kiran,Yadav,Kalamboli,903487845,painter String
console.log(arrayy.toString(), typeof arrayy); // Kiran,Yadav,Kalamboli,903487845,painter object

// arrayy is still an Array ONLY

// ============== valueOf()
// return the elements of an array .. same like printing the array variable i.e. even though not applied it works the same way!

console.log(arrayy.valueOf());
/*
(5) ['Kiran', 'Yadav', 'Kalamboli', 903487845, 'painter']
0: "Kiran"
1: "Yadav"
2: "Kalamboli"
3: 903487845
4: "painter"
length: 5
[[Prototype]]: Array(0)
*/

// =============== fill("value")
// fill an entire array with the static values

arrayy.fill("static_value"); // we add any value in " " or number

console.log(arrayy);
/*
(5) ['static_value', 'static_value', 'static_value', 'static_value', 'static_value']
0: "static_value"
1: "static_value"
2: "static_value"
3: "static_value"
4: "static_value"
length: 5
[[Prototype]]: Array(0)
*/
for (var i = 0; i < arrayy.length; i++) {
  console.log(arrayy[i] + " ");
}

arrayy.forEach(function (value) {
  console.log(value + " ");
}); //static_value * 5

arrayy.forEach(function () {
  var value;
  console.log(value + " ");
}); // undefined * 5

//====================== map(functionName)

var sdata = [
  { fname: "Kiran", lname: "yadav" },
  { fname: "Roahn", lname: "Patil" },
  { fname: "Neel", lname: "Shinde" },
  { fname: "Vijay", lname: "Sawant" },
];

var newArray = sdata.map(fullName);

function fullName(name) {
  return name.fname + " " + name.lname;
}
console.log(newArray, typeof newArray);
/*
(4) ['Kiran yadav', 'Roahn Patil', 'Neel Shinde', 'Vijay Sawant']    'object'
0: "Kiran yadav"
1: "Roahn Patil"
2: "Neel Shinde"
3: "Vijay Sawant"length: 
4[[Prototype]]: Array(0)
*/
//We can use it for iterating thru an array too but its purpose is differentthan iterations

//=========================== forEach Loop

// array.forEach(element => {console.log(element) }); //lambda expressions

// array.forEach(function(value){
//    document.write(value + "</br>")
//});

e.forEach(function (value) {
  document.write(value + "</br>");
});
/*
Sanjay
Kiran
Rahul
Rohini
Tanishque
Tadibul
*/

e.forEach(function (value, index) {
  document.write(index + " : " + value + "</br>");
});
/*
0 : Sanjay
1 : Kiran
2 : Rahul
3 : Rohini
4 : Tanishque
5 : Tadibul
*/

// Alternate methods

e.forEach(loop);

function loop(ele, ind) {
  document.write(ind + " : " + ele + "</br>");
}

/*
0 : Sanjay
1 : Kiran
2 : Rahul
3 : Rohini
4 : Tanishque
5 : Tadibul
*/

//========================= String Methods

var str = "Java Script is an great language";

// var a = str.length();// no such function

var a = str.length; // 32
console.log(a);

console.log(str.toLowerCase()); //java script is an great language

console.log(str.toUpperCase()); //JAVA SCRIPT IS AN GREAT LANGUAGE

//=============== includes() // case sensitive inputs

console.log(str.includes("Java")); // true
console.log(str.includes("Jav")); // true

console.log(str.includes("jav")); // false
console.log(str.includes("ipt")); // true

console.log(str.includes("Ipt")); // false

//=============== startsWith() and endsWith()

console.log(str.startsWith("J")); // true

console.log(str.startsWith("j")); // false

console.log(str.startsWith("Lang")); // false

console.log(str.startsWith("lang")); // false

console.log(str.endsWith("a")); // false

console.log(str.endsWith("age")); // true

console.log(str.endsWith("ipt")); // false

console.log(str.endsWith("is")); // false

// ======= search()

// return index of the word or character

console.log(str.search("is")); // 12

console.log(str.search("a")); // 1

console.log(str.search("e")); // 20

console.log(str.search("Zany")); // -1

// ============ match();
// match() makes an array of input by search all the time

// console.log(str.match("a")) INVALID WAY fo searching

// regular expressions  ->  /is/g
// here what is to be search is mentioned inside the / / and g stands for global search it mean it will search all the stringg
console.log(str.match(/is/g));

/*
['is']0: "is"
length: 1
[[Prototype]]: Array(0)
*/

var res = console.log(str.match(/a/g));
console.log(res, typeof res); //
/*
(6) ['a', 'a', 'a', 'a', 'a', 'a']
0: "a"
1: "a"
2: "a"
3: "a"
4: "a"
5: "a"
length: 6
[[Prototype]]: Array(0)
*/

// =============== indexOf() and lastIndexOf()

console.log(str.indexOf("a")); // 1

console.log(str.lastIndexOf("a")); // 29

// =============== replace("old_vale", "new_value")

// .. belwo will reaplce only once on first encounter
console.log(str.replace("Java", "PHP")); //PHP Script is an great language

// .. belwo will reaplce all the /is/ in a string
console.log(str.replace(/is/g, "are")); //Java Script are an great language

// =========== trim()

// used in form input to trip the space entered by user in inputs
var strr = "    Kiran       ";
// alert(strr)

// alert(strr.trim())

//57

// ============ OBJECTS IN JS =============

var student = {
  fname: "Kiran",
  lname: "Yadav",
  age: 25,
  country: "India",
  hobbies: ["reading", "cricket", "playing flute"],
  laptop: {
    Company: "HP",
    RAM: "8 GB",
    ROM: "1 TB",
  },
  Marks: function () {
    return 90;
    // return 90% - not allowed -> check % symbol here
  },
  FullName: function () {
    return this.fname + " " + this.lname; // its compulsion to use this key word to access the properties of the object inside the function in the same object
  },
  Location: "Kalamboli",
};

document.write(student); // [object Object]
document.write("</br>");

//accessing the properties of the objects
document.write("Student first Name is " + student.fname + "</br>"); // Student first Name is Kiran

document.write("Student last Name is " + student.lname + "</br>"); // Student last Name is Yadav

//accessing array from an object
document.write("His first hooby is " + student.hobbies[0] + "</br>"); // His first hooby is reading

document.write("His second hooby is " + student.hobbies[1] + "</br>"); //His second hooby is cricket
document.write("His third hooby is " + student.hobbies[2] + "</br>"); // His third hooby is playing flute

//accesing another object from the one object
document.write("he has  " + student.laptop.Company + " laptop </br>"); // he has HP laptop
document.write(
  "Laptop has  " +
    student.laptop.RAM +
    " ram and " +
    student.laptop.ROM +
    " rom </br>"
); // Laptop has 8 GB ram and 1 TB rom

//ACCESING FUNCTION ROM AN OBJECT
document.write(
  "He is brilliant student and has secure " + student.Marks() + "% </br>"
); //  He is brilliant student and has secure 90%

var fullName = student.FullName();

document.write(fullName); //Kiran Yadav

console.log(student);

//ANOTHER way of creating an object

var person = new Object(); //object() => make sure O of Object must be capital

person.fname = "Rahul";
person.lname = "Shinde";
// person.driver[0] = "Two-Wheeler";
// person.driver[1] = "Three-Wheeler";

console.log(person);
document.write(person); // [object Object]

document.write(person.fname); // Rahul

document.write(person["age"]); // undefined

// document.write(person.driver[1]);

// forin loop

document.write("FOR IN LOOP  </br> </br> </br>");

// see it closely interating in student object and accessing values with the person object
for (var key in student) {
  document.write(key + " " + person[key] + "</br>");
}
/*
fname Rahul
lname Shinde
age undefined
country undefined
hobbies undefined
laptop undefined
Marks undefined
FullName undefined
Location undefined
*/
document.write("</br> </br> </br>");

// ========== Array of Objects ============

var students = [
  { name: "Kiran", location: "Kalamboli", skills: "Painter" },
  { name: "Rohan", location: "nerul", skills: "driller" },
  { name: "Suresh", location: "panvel", skills: "cutter" },
];

students.forEach(loop);

function loop(value) {
  document.write(value + " ");
}
// [object Object] [object Object] [object Object]

function loop(value, index) {
  document.write(
    value.name + " " + value.location + " " + value.skills + "</br>"
  );
}
/*
Kiran Kalamboli Painter
Rohan nerul driller
Suresh panvel cutter
*/
// =================== Const variable with array and objects ==============

const ConArray = [10, 20, 30, 40];

// ConArray =[2,3,4]  // ERROR  Uncaught TypeError: Assignment to constant variable.

ConArray[0] = 1;
ConArray[1] = 2;
ConArray[2] = 3;
ConArray[3] = 4;

//fun fact is here we can change the individual values of array
document.write(ConArray); // 1,2,3,4

ConArray[6] = 4;
document.write(ConArray); // 1,2,3,4,,,4

//With Objects
const ob = {
  name: "Ram",
  age: 25,
};

/*ob ={
    name : "Kiran",
    age :30
}*/ // myScript.js:745 Uncaught TypeError: Assignment to constant variable

ob.name = "Kiran";
ob.age = 30;

document.write(ob.name, " ", ob.age); // Kiran 30

//========================= Number Methods
// number()
// parseInt()
// parseFloat()
// isFinite()
// isInteger()
// toFixed()
// toPrecision()

// ============ number()

var a = 100;
console.log(a, typeof a); //100 'number'

a = "100";
console.log(a, typeof a); // 100 string

var b = Number(a);
console.log(b, typeof b); // 100 'number'

console.log(a + 10); // 10010
console.log(b + 10); // 110

var c = true;
b = Number(c);
console.log(b, typeof b); //1 'number'

a = "12 23";
console.log(a, typeof a); //12 23 string
b = Number(a);
console.log(b, typeof b); // NaN 'number'

// parseInt()
a = "12 23";
console.log(a, typeof a); //12 23 string
b = parseInt(a);
console.log(b, typeof b); // 12 'number'

a = "34.53";
console.log(a, typeof a); // 34.53 string
b = parseInt(a);
console.log(b, typeof b); // 34 'number'

a = 38.93;
console.log(a, typeof a); // 38.93 'number
b = parseInt(a);
console.log(b, typeof b); // 38 'number'

a = " 0100  flowchar";
console.log(a, typeof a); //0100  flowchar string
b = parseInt(a);
console.log(b, typeof b); // 100 'number'

a = "flowchar 0100 ";
console.log(a, typeof a); //flowchar 0100  string
b = parseInt(a);
console.log(b, typeof b); // NaN 'number'

a = true;
console.log(a, typeof a); //true 'boolean'
b = parseInt(a);
console.log(b, typeof b); // NaN 'number'

// parseFloat()
a = "10 33";
console.log(a, typeof a); //10 33 string
b = parseFloat(a);
console.log(b, typeof b); // 10 'number'

a = "10.33";
console.log(a, typeof a); //10 33 string
b = parseFloat(a);
console.log(b, typeof b); // 10.33 'number'

a = 100;
console.log(a, typeof a); //100 'number'
b = parseFloat(a);
console.log(b, typeof b); // 100 'number'

// isFinite()
a = 10.33;
console.log(a, typeof a); //10.33 'number'
b = isFinite(a);
console.log(b, typeof b); // true 'boolean'

a = -10.33;
console.log(a, typeof a); //10.33 'number'
b = isFinite(a);
console.log(b, typeof b); // true 'boolean'

a = "-10.33";
console.log(a, typeof a); //-10.33 string
b = isFinite(a);
console.log(b, typeof b); // true 'boolean

a = "Stringg";
console.log(a, typeof a); //Stringg string
b = isFinite(a);
console.log(b, typeof b); // true 'boolean'

a = Infinity;
console.log(a, typeof a); //Infinity 'number'
b = isFinite(a);
console.log(b, typeof b); // false 'boolean'

// isInteger() // it just check number type of variable whther integer or not
a = 10;
console.log(a, typeof a); //10 'number'
b = Number.isInteger(a);
console.log(b, typeof b); // true 'boolean'

a = 10.0;
console.log(a, typeof a); //10 'number'
b = Number.isInteger(a);
console.log(b, typeof b); // true 'boolean'

a = 10.5;
console.log(a, typeof a); //10 'number'
b = Number.isInteger(a);
console.log(b, typeof b); // false 'boolean'

a = "100 in a string";
console.log(a, typeof a); //100 string
b = Number.isInteger(a);
console.log(b, typeof b); // false 'boolean'

a = true;
console.log(a, typeof a); //true boolean
b = Number.isInteger(a);
console.log(b, typeof b); // false 'boolean'

// toFixed()
a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toFixed(2);
console.log(b, typeof b); // 5.56 string

a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toFixed(3);
console.log(b, typeof b); // 5.568 string

a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toFixed(a);
console.log(b, typeof b); // 5.5678 string

// toPrecision()
a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toPrecision(2);
console.log(b, typeof b); // 5.6 string

a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toPrecision(3);
console.log(b, typeof b); // 5.67 string

a = 5.5678;
console.log(a, typeof a); //5.5678 'number'
b = a.toPrecision(a);
console.log(b, typeof b); // 5.5678 string

//========================= Math Methods
// extensively used in gaming, computing web applications
//Below functions are used with => Math.func()

// ceil()
// floor()
// round()
// trunc()
// max(x,y,z,...n)
// min(x,y,z,...n)
// sqrt()
// cbrt()
// pow(x,y)
// random()
// abs()
// PI

// ceil()
// will give upper value nearest to the given number

var a = Math.ceil(5.5);
console.log(a); // 6

var a = Math.ceil(1.445);
console.log(a); // 2

var a = Math.ceil(-1.145);
console.log(a); // -1

var a = Math.ceil(-1.9);
console.log(a); // -1

// floor()
// will give lower value nearest to the given number

var a = Math.floor(5.5);
console.log(a); // 5

var a = Math.floor(1.445);
console.log(a); // 1

var a = Math.floor(-1.145);
console.log(a); // -2

var a = Math.floor(-1.9);
console.log(a); // -2

// round()
// it will round off to the nearest integer
var a = Math.floor(5.5);
console.log(a); // 5

var a = Math.floor(1.445);
console.log(a); // 1

var a = Math.floor(-1.145);
console.log(a); // -2

var a = Math.floor(-1.9);
console.log(a); // -2

// trunc()
// wroks similar to floor excepot in case of negative numbers
var a = Math.trunc(5.5);
console.log(a); // 5

var a = Math.trunc(1.445);
console.log(a); // 1

var a = Math.trunc(-1.145);
console.log(a); // -1

var a = Math.trunc(-1.9);
console.log(a); // -1

// max(x,y,z,...n)
var a = Math.max(2, 3, 4, 5, 6, 8, 4, 5, 6, 9, 6, 2, 11, 45, 76, 34, 55, 46);
console.log(a); // 76

var a = Math.max(2, 3, 4, 5, -6, 8, 5, 6, 9, -6, 2, 11, 45, 76, 34, 55, 46);
console.log(a); // 76

//finding max from array with max()???
a = [2, 3, 4, 5, 67, 7654, 3, 546, 5];
console.log(Math.max(a)); //NaN

// min(x,y,z,...n)
var a = Math.min(2, 3, 4, 5, 6, 8, 4, 1, 5, 6, 9, 6, 2, 11, 45, 76, 34, 55, 46);
console.log(a); // 1

var a = Math.min(2, 3, 4, 5, -6, 8, 5, 6, 9, -6, 2, 11, 45, 76, 34, 55, 46);
console.log(a); // -6

// sqrt()
// cbrt()
// pow(x,y)
console.log(Math.pow(10, 3)); //1000

// random()
//return the value from 0 - 0.99999999...16 times

for (var b = 0; b < 10; b++) {
  console.log(Math.random());
}
/*
 0.059669421988742366
 0.17820919829739168
 0.010484591341877403
 0.7900152080955545
 0.17315219564379603
 0.5012975215079787
 0.5190050792214822
 0.41304486114995687
 0.5285141962450051
 0.528591562819738
*/

for (var b = 0; b < 10; b++) {
  console.log(Math.floor(Math.random() * 100) + 1);
}
/*
62
19
16
26
61
51
31
54
100
70
*/

// abs()
// return the positive value fopr all a=neagive values
console.log(Math.abs(5.65)); // 5.65
console.log(Math.abs(-5.65)); // 5.65
console.log(Math.abs(null)); // 0
console.log(Math.abs("stringg")); // NaN

// PI
//(Pie - retiurn the static constant value)

console.log(Math.PI); // 3.141592653589793

// ================== Date Methods
// toDateString()
// getDate()
// getFullYear()
// getMonth()
// getDay()
// getHours()
// getMinutes()
// getSeconds()
// getMilliseconds()
// setDate()
// setFullYear()
// setHours()
// setMilliseconds()
// setMinutes()
// setMonth()
// setSecond()

// this picks up the date and time from local or client and NOT from server side

var now = new Date();
console.log(now, typeof now); // Thu Jun 09 2022 20:41:16 GMT+0530 (India Standard Time) 'object'
console.log(now.toDateString(), typeof now, typeof now.toDateString()); // Thu Jun 09 2022 object string

// ============= passing default value of date in constructor
var now = new Date("January 05 2010");

console.log(now.toDateString(), typeof now, typeof now.toDateString()); // Tue Jan 05 2010 object string

console.log(now.setDate(20)); // 1263925800000
console.log(now, typeof now); //Wed Jan 20 2010 00:00:00 GMT+0530 (India Standard Time) 'object'
console.log(now.toDateString(), typeof now, typeof now.toDateString()); // Wed Jan 20 2010 object string

console.log(now.setHours(10)); // 1263961800000
console.log(now, typeof now); // Wed Jan 20 2010 10:00:00 GMT+0530 (India Standard Time) 'object'

//========================= DOM ===============

// HTML DOM tree => Nodes
