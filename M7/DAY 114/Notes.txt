=============================
=> MultiThreading :
=============================

Thread t1 = new Thread(new ThreadStart(Func1));

static void Main(){

Thread t1= new Thread(Func1);
Thread t1= new Thread(Func2);
t1.Start();
t2.Start();

for(i=0;i<60;i++)
{
if(i==10)
t1.Abort();
}
Console.WriteLine("Main end..");
}

static void Func1(){
for(int i =0;i<100;i++)
{
Console.WriteLine("First " + i);
}
}

static void Func2(){
for(int i =0;i<100;i++)
{
Console.WriteLine("First " + i);
}
}

Note : here, ThreadStart is delegate!

=============================
=> Foreground Thread and Backgroud thread 

t1.IsBackground = true;


->In Foreground, Main thread will dont kill itslef 
unless any other thread inside Main gets killed

-> In background Thread, MAIN CAN OMPLETE ITS EXECUTION 
AND CAN KILL ITSELF EVEN IF THE BACKGROUND THREAD HAS NOT YET COMPLETED ITS EXECUTION!

=============================
=> Priority :

- Higest
- AboveNormal
- Normal
- BelowNormal
- Lowest

t1.Priority = ThreadPriority.Highest;

=============================
=> ThreadStates

- Unstarted
- Running
- Aborted
- Background
- Stopped
- StopRequested
- SuspendRequested
- Unstarted
- Suspended
- WaitSleepJoin


if(t1.ThreadState == ThreadState.Suspended)
{

}
else if(t1.ThreadState == ThreadState.Running)
{

}


- Deprecated :
t1.Suspend();
t1.Resume();

Alternatives : used with UI's
to Suspend();
WaitHandle wh = new AutoResetEvent(false);
wh.WaitOne();

to Resume();
((AutoResetEvent)wh).Set();

=============================
=> Join

- this method ensurs that thread which will call this method will 
complete its execution adn then only next code to that line is executed!

eg. t1.Join();

Excetuion after the line which called above method will be continued only after t1 finishes it exectuion!!!

Above that line if there are other threads then they can be called interchangebly!


- here, there becomesthe contract between t1 and main that main 
will wait for t1 to complete it's execution!

=============================
=> new ParameteriseThreadStart(Func)
- used for function with the paramter and void return type
- but the function can only accepts object o as a function parameter
So if function accepts two params then we msut
1] Create a class or struct which has two properties and pass it's object
2] Create array of objects and pass it as a params


Thread t1 = new Thread(new ParameteriseThreadStart(Func1));
t1.Start("o1");


//Even below is also valid!
Thread t1 = new Thread(Func1);
t1.Start("o1");

static void Func(object o1)
{
	for(int i=0;i<10;i++){
	Console.WriteLine("Thread one " + i.ToString() + O.ToString());
	}		
}

=============================

=> ParamaterizedThreads :
- parameter can be passed in the form of object only!


Find Out what changes to be made if we want to pass more than one params 
and other than object in above Func!
1]Create a class that has 2 properties and pass an object of the class
2]Create a array of objects and pass ref varibale of array!

	object[] arr = new object[2];

-> How to pass two params ?
- can create a class or struct which has two properties :
- We can use arrayList then typecast it not the function
- Array of Objects 
- Anonymous methods and lambda's, Local Func

object[] a = new object[2];
a[0] = "string";
a[1] = 100;

Thread t = new Thread(F3);
t.start(a);

void F3(object o)
{

   //some code...

}

=======================
=> Thread Pool :

- WE DONT HAVE MUCH CONTROL OVER THE THREADS
- BUT THREAPOOL IS FASTER 

- Something that is not available to one but to all!
- In Thread pool one don't get the control, as he gets by creating
thread from thread class
eg. car pick and drop service to the employee! Pool of car's is made available below office!


Assuming Thread as our taxi and functioni as our task to go home ... function sits in a thread sand gets executed!

In thread Pool we don't create our own threads :

ThreadPool.QueueUserWorkItem(PoolFunc2,"aaa");

ThreadPool.QueueUserWorkItem(new WaitCallBack(PoolFunc2));

ThreadPool.QueueUserWorkItem(new WaitCallBack(PoolFunc2),"aaaa");

#WaitCallBack - is delegate

here, PoolFunc2is static void function with object o as params! 

=> Methods of ThreadPool :
ThreadPool.SetMinThreads()  - Min pool size
ThreadPool.SetMaxThreads()  - Max thread size
ThreadPool.GetMinThreads()  - get the min pool size
ThreadPool.GetMaxThreads() - get th max pool size

ThreadPool.GetAvailableThreads(out workerthreads, out iothreads) - No of threads available 


workerthreads - used internally by windows
iothreads -  we are using in our threads

Console.WriteLine(iothreads);

It's not recommende to change the min and max of thread pool let CLR decide it!

=======================
=======================


=> Synchronisation of Threads :

class Demo{

static int i;


	static func(){
	i++;
	int j;
	j=i; 
	}

	static func(){
	i=200;
	int k;
	k=i; 
	}

}

- Sync Version :

class Demo{

static int i;
static object obj = new object();

	static func(){
lock(obj) --- Monitor.Enter(obj)
{
	i++;
	int j;
	j=i; 
}
	}

	static func(){
lock(obj)--- Monitor.Exit(obj)
{
	i=200;
	int k;
	k=i; 
}
	}

}

Note: lock(obj){....} is only available in c# and not in any other lanuguage of .net
	
      instead 	
	Monitor.Enter(){....}  
        and 
	Monitor.Exit(obj){....}

=======================

=> Interlocked :

- instead of putting the synch code in diff lock blocks can be put into this class, which has a lot of methods supporting synch!
- instead of using sinlge statement like i++, i+=100,i--, swaping use interlocked methods directly for synchronisation

Interlocked.Add(ref i,10); -- i+=10

Interlocked.Increment(ref i); -- ++i

Interlocked.Decrement(ref i); -- --i

Interlocked.Exchange(ref i, 100); -- i =100


=======================
Practice code from : 

www.linqsamples.com
=======================