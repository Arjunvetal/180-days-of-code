=================================
Problems with the dataSet : 
- If some changes made in the dataset and if the connection is lost then changes will also get lost!
- So it is serialised in XML locally and after sometime derialised and values can be read later on and at that point when connection is on those changes canbe uploaded back in the database!

: Dataset has a direct option of

ds.WriteXml and ds.WriteXmlSchema!



ds.WriteXml("Emps.xml", XmlWriteMode.___)

=================================
=> After Serilisation

- xml and ssd files are created in the bin\debug folder

- RowState is changes to Modified!



DataView dv = new DataView(ds.Tables["Emps"]);
//dv.Sort="Name";
dv.RowFilter = "DeptNo=" + textBox1.Text;

//dataViewGrid.dataSource = ds.Tables["Emps"];
dataViewGrid.dataSource = dv;


: Every datatable comes with the default iew : 

: On creating the datatable we get the default dataView with it!


Hence, creation of DataView dv object is not needed as we already gets the defaultView

ds.Tables["emps"].defaultView.RowFilter  ="DeptNo" + textBox1.Text;
 

=================================
=> ASP .NET : 

: ASP.NET Webforms and ASP.NET MVC
- ASP.NET Webforms is otally different than MVC

=> ASP.NET Webforms 
- Event Drive Code
- Easier
- Lot of code is handled by the system itself
- In build features like state management
- less control 
- code is slower and bulkier
- Not so easily extensible code
- Not so easy

=> ASP.NET MVC
- MVC Pattern
- Comparatively difficult
- Programmer has to do more of the coding
- Not in built 
- More control of programmer 
- Code is lighter and faster
- easily extensible code
- Lends itself to TDD, Devops etc. i.e. can be easily in

.Net core doent supports webforms!!

And from v4.7 .net framework, Microsoft has stopped,

--------------------------------------
= > MVC :

- MVC seperates an application into three amin groups of components : Models ViWS And Controllers
- Helps to achieve SEPERATION OF CONCERNS
- User req are routed to the controller, which is responsible for working with the model to perform user actions and or retrieve results of queries
- The controller chooses the View to display to the user and provides it with any Model data it requires!

Model : 
- class which represent the data that we have in a system!
- represents the state of an application and any business logic and operation that is perfomed by it

View :
- Object of the model views would be passed to the view where the data would be displayed!
- Use Razor view engine to embed .Net code in HTML Markup
- Razor code is server side code that dynamically generate HTML
- LOGIC MUST BE MINIMUM AND MUST BE RELATED TO THE 

Strongly type views :
- Views that rcvs tha data from the model directly.
- controller create and populates these ViewModel

Controllers :
- controller handles the user interaction

=================================
- Frequently sued refrences :
- System.Web.MVC
- System.Web.Razor

App_Data
App_Start

- All the setting realted to the web application will be  made in the web.config

global.asax.cs
Application_Start(){}// when the first req comes to the pplication after deployment, this method is called!

=> IIS Express - light weight web server given with VS 

=> ViewBag : 
- part of dynamic coding in c# and exisitng class Xpando Object
- Pupose of Xpando class is that we can Add properties and methods to it at run time

=> ViewBag is alos available in view, 

=> Razor Code : 
@{

Razor code.......

}

=> READ PARAMS VALUES RECVD FROM URL:
ID = @viewBag.id

Query String : 
LOCALHOST:73463//DEFAULT/iNDEX10?A=100&B=KIRAN&C=300


Method is :
public ActionResult Index(int a=0,int b=0,int c=0,int d=0){

return view();
}

=================================

Razor code in HTML
@{
if(1%2==0)
{
s ="even";
}
esle{
s="odd";
}
}

----------------------------------

=> Html in Razor code : (@:)

@if(i%2==0)
{
@:Result = even <br/>
}
else{
@:Result = Odd <br/>
}


----------------------------------
=> Table prininting with the Views :

<table border="1">
@for(int i=1; i<=5; i++)
{

<tr>
<td>5</td>
<td>*</td>
<td>@j</td>
<td>=</td>
<td>@(j*5)</td>
</tr>

}

===================================
=> Model Binding :

- ANY CHANGES MADE IN THE MODEL BUILD A PROJECT

=> Scafolding : Code generated by Visual Studio

Model Binding : It will automcatically populates(assign/takes) the values of hte 
inputs from form collection providd the namses for the input fields 
must match with the properties of the  Model Class.


=================================

@Html.AntiForgeryToekn()
- To check if the code is valid or not .. whether the values are coming from the right source
- To validate the 
- generates the hidden inputs and validates the inputs in the form

=================================
=> Layers in Model :

BOL -> Data -> DB


=================================

=> ViewModel : 
- It's a class
- Class that has stuff in it that is required by the view 
and not becasue entity requires it!

eg.

public  class Employee{
 
Inumerable<SelectListItem> Departments{set;get;};
}


=================================

=> AntiforgeryToken()
- check iof the code is not generated by the bots
- servers the security purpose


=======================

@using(@Html.BeginForm())
{
	----- html form
}

----------------------------------------


@Html.ActionLink("name","action",new{id=item.EmpNo, param1 = item.Name})

----------------------------------------

Repeatative code is kept in diff layer

BOL - DAL - DB
Business Object Layer
Data Access Layer
Data base

----------------------------------------
Imp difference :

@Html.Display(); -- loosely bound
@Html.DisplayFor(model=>model.EmpNo); -- tighly bound with the model

------- TextBox 

@Html.TextBox("nameIstxt1","valueIshello");


Below two textBoxes are the same and model binded!

@Html.TextBox("Name",Model.Name);


@Html.TextBoxFor(x=>x.Name)

-- name for the above input field would be EmpNo which is pickedUp from the model
hence its tightly coupled view!


------- check Box

@Html.CheckBox("chk1");

@Html.checkBoxFor(model=>mode.IsActive);


------ Radio Buttons 

@Html.RadioButton("btn1",Yes); 
@Html.RadioButton("btn1",No); 
@Html.RadioButton("btn1",May be); 

--------- DropDown List

@Html.DropDownList("ddlDepts", Model.Departments);


@Html.DropDownListFor(model=> model.DeptNo, Model.Departments)


@Html.DropDownListFor(model=> model.DeptNo, (Ienumerable<ListSelectItem>)ViewBag.Departments)


- Model is something created based on system design, requirements!
that mirror the real world!

- View Model is the class that is required by the view! View can be shown properly!

eg.
- Employee class with the listOfDepartments!

Ienumerable<SelectListItem> var{set;get;};


Model Binding : Input in the view have the same name as that oif the properties of the Model!


----------------------------------------
=> Annotations and Validations!


Required - RequiredAttribute => ValidationAttribute => Attribute


[Display(Name="Basic Salary")]


=======================

=> Partial View

If each view has the header and footer then it can be kept under the shared view in layouts!

What if the view has the same design but the postiion is diff in each view!

for that we need partial view!

select create partial view while creating new view!


-- to add in nomal view

@{

Html.RenderPartial("PartialViewName");

}

@Html.Partial("PartialViewName");


[ChildActionOnly]
used to make it not called direclty and can be called only from the views!


Why Http is stateless!
-> Data from the prev req is not available on new req!

- if it stored the data or the state then with the each req tthe laon on server will rise and scalability will be affected!
----------------------------------------
state management :

1.} ViewBag : 
- values in viewbag can be access from veiw to layout and from action to view
- values of viewBag are lost if views are returned or sendRedirect!
- On sendRedirect if we print the viewbag value no error if we try to assign viewbag value then error!!!

ViewBag.message ="aaa";
@ViewBag["message"]


So every view and viewbag has their won values!

ViewBag internally usea ViewData, and its a wrapper class for ViewData!
----------------------------------------
2.} ViewData["message"] ="aaa";

@ViewData["message"].ToString();


While retireving the data we need to type cast it in case of @ViewData!

ViewData.["i"] =1000;
int i = (int)ViewData.["i"]

ViewData.["key"] =emp;
Employee emp = (Employee)ViewData.["key"]

- ViewData is used for passing value from Controller to View
- ViewData is available only for current req.
-value is Lost on a req redirect!
- while retriving the value we must type cast it!

- is a dictionary object where key are string and values will be objects!

- derived from ViewDataDictionary Class
----------------------------------------

3} .Temp Data :

- Derived from TempDataDictionary class!
- is a dictionary object where key are string and values will be objects!

- ViewData is available only for current req.
- value is NOT lost on a req redirect!

and its true for as many redirect as possible!

from v1 to v2 to v3 and vn!


----------------------------------------
What is the session?
- time interval!

Session ends  : Session.Abandon

1.when the no req rcvd by the server from client within session time i.e after time out!

2.We can set that time also we can manually exist from the session!

3.When Application ends : when server is closed!

with req session ID is created and sent back on the client using session Cookie!

----------------------------------------
4 } Session Variables :

Session["key"] = value;


Session["i"] = 100;
int i =(int)Session["i"];


Session.Abandon
----------------------------------------
5 } QueryString : 
- 

----------------------------------------

6}Coockie :

- To enhance the user experience 
- details stored in the text file on client!
- can be given expiry date 
- We can read coockie with request and write cookies with the response


HttpCookie objCookie = new HttpCookie("ChocoChips");


objCoockie.Expire = DateTime.Now.AddDays(1);

-- storing one value
objCoockie.Value = "a";


-- storing multiple values
objCoockie.Values["Key1"] ="a";
objCoockie.Values["Key2"] ="b";

Response.Cookies.Add(objCoockie);


HttpCookie obj = Request.Cookies("chocoChips");

if its null which means wither its not created or got expired!


=> delete the cookie!


----------------------------------------
7}Application variables :

Available across all sessions! for all user logged in!

System.Web.HttpContext.Current.Application["Key"]="value";



=======================

=> Entity FrameWork :

- ORM
- Tables will be automatically created based on the classes!
 Columns will be mapped to the Properties!

- Three approaches :
DB First -DB Admin
Code First  - Sys Architech
Model First - 


=======================